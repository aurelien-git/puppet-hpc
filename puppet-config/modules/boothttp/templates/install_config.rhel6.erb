#########  Kickstart file for RHEL Servers of the cluster ############
<%- 
  all_options = scope['::boothttp::install_options']
  options = all_options['rhel6']
  if options.nil?
-%>
# The ::boothttp::install_options hash has a nil hash for the rhel6
# options. Can't generate a valid kickstart.
<%-
    return
  end
-%>

### The default installation mode. You must specify the type of installation ###
### from cdrom, harddrive, nfs, liveimg, or url (for FTP, HTTP, or HTTPS installations). ###
### The install command and the installation method command must be on separate lines. ###
install
url --url <%= options['install']['url'] %> --proxy=<%= options['install']['proxy'] %>

### Configures additional yum repositories that may be used as sources for package installation ###
<%- options['additional_repos'].each do | name, repo_options | -%>
repo --name=<%= name %> --baseurl=<%= repo_options['baseurl'] %> --proxy=<%= repo_options['proxy'] %>
<%- end -%>

### Perform the Kickstart installation in text mode ###
text

### Reboot after the installation is successfully completed ###
reboot

### Sets the language to use during installation and the default language on the installed system. ###
lang <%= options['lang'] %>

### Sets one or more available keyboard layouts for the system. ###
keyboard <%= options['keyboard'] %>

### Sets the system time zone to timezone. ###
timezone <%= options['timezone'] %>

### Configures network information for the target system and activates network devices in the installation environment. ###
network --onboot yes --device eth0 --bootproto dhcp --noipv6
network --onboot no --device usb0 --bootproto dhcp --noipv6

### Tells the installation program to suppress the Unsupported Hardware Detected alert. ### 
### If this command is not included and unsupported hardware is detected, the installation will stall at this alert. ###
unsupported_hardware

### If zerombr is specified, any invalid partition tables found on disks are initialized. ###
#zerombr

### Removes partitions from the system, prior to creation of new partitions. ###
clearpart --drives=<%= options['system_disk'] %> --all

### Causes the installation program to ignore the specified disks. ###
ignoredisk --only-use=<%= options['system_disk'] %> 

### Creates a partition on the system. ###
part /boot/efi --fstype=efi --grow --maxsize=200 --size=20
part /boot --asprimary --ondrive=<%= options['system_disk'] %> --fstype=ext3 --size=250
part swap --recommended --ondrive=<%= options['system_disk'] %>
part pv.01 --asprimary --size 1 --grow --ondrive=<%= options['system_disk'] %>

### Creates a Logical Volume Management (LVM) group. ###
volgroup sysvg pv.01

### Create a logical volume for Logical Volume Management ###
logvol / --fstype=ext4 --vgname=sysvg --size=10000 --name=root
logvol /var --fstype=ext4 --vgname=sysvg --size=15000 --name=var
logvol /tmp --fstype=ext4 --vgname=sysvg --size=10000 --name=tmp

### Specifies how the boot loader should be installed. ###
bootloader --location=mbr --driveorder=<%= options['system_disk'] %> --append="<%= options['bootloader_append'] %>"

### If present, X is not configured on the installed system. ###
skipx

### During the installation, you can interact with the installation program and monitor its progress over an SSH connection. ###
#sshpw --username=installer installer --plaintext

### Sets the system's root password ###
rootpw --iscrypted <%= options['crypted_rootpw'] %>

### Sets up the authentication options for the system ###
authconfig --enableshadow --passalgo=sha512

### Specify the firewall configuration for the installed system. ###
firewall --disabled

### Sets the state of SELinux on the installed system. ###
selinux --disabled

### Reboot after the installation is successfully completed. ###
reboot

%packages --nobase 
<%- options['packages'].each do | package| -%>
<%= package %>
<%- end -%>

%end

%pre 
#!/bin/sh
# This will remove the loaded HBA modules from the kernel

remove_modules(){
MODULES="qla mpp lpfc mpt2sas"
for module in ${MODULES};do
for i in $(lsmod | awk '{print $1}'| grep ${module}); do
echo Will remove: $i >> /dev/tty1
rmmod $i
sleep 2
done
sleep 5
done
}

remove_modules
echo "All SAN modules (${MODULES}) removed"
%end

%post --log=/mnt/sysimage/root/ks-post.log
dhclient eth0
# Remove the anaconda blacklist because it is not used anymore in
#  the running machine.
rm /etc/modprobe.d/anaconda.conf
<%= options['post_command'] %>
%end
