<% ########################################################################## -%>
<% #  Puppet configuration file                                             # -%>
<% #                                                                        # -%>
<% #  Copyright (C) 2014-2017 EDF S.A.                                      # -%>
<% #  Contact: CCN-HPC <dsp-cspit-ccn-hpc@edf.fr>                           # -%>
<% #                                                                        # -%>
<% #  This program is free software; you can redistribute in and/or         # -%>
<% #  modify it under the terms of the GNU General Public License,          # -%>
<% #  version 2, as published by the Free Software Foundation.              # -%>
<% #  This program is distributed in the hope that it will be useful,       # -%>
<% #  but WITHOUT ANY WARRANTY; without even the implied warranty of        # -%>
<% #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         # -%>
<% #  GNU General Public License for more details.                          # -%>
<% ########################################################################## -%>

#####################################################################
# Network interfaces configuration (Debian Operating System)
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).
#####################################################################
# NOTE: This file is automatically generated by puppet.
# Changes to this file will be overwritten periodically by puppet!
#####################################################################
# TEMPLATE: {<%= @name %>}/<%= File.basename(__FILE__) %>}
#####################################################################
<% # Import Hash Tables -%>
<% require 'ipaddr' -%>
<% netconfig = scope['::netconfig'] -%>
<% defaultgw = scope['::network::defaultgw'] -%>
<% bondcfg   = scope['::network::bonding_options'] -%>
<% bridgecfg = scope['::network::bridge_options'] -%>
<% routnet   = scope['::network::routednet'] -%>
<% ib_mtu    = scope['::network::ib_mtu'] -%>
<% ib_mode   = scope['::network::ib_mode'] -%>
<% network_gw_set = String.new -%>
<% bndprim = String.new -%>
<% bndmode = String.new -%>
<% routecfg = Hash.new -%>
<% ## Insert bridged interfaces in the netconfig ##-%>
<%- bridgecfg.map do | bridge, value | -%>
  <%- if not netconfig.key?(bridge) -%>
    <%- next -%>
  <%- end -%>
  <%- ports = value['ports'] -%>
  <%- ports.each do | port | -%>
    <%- if not netconfig.include?(port) -%>
      <%- netconfig[port] = [] -%>
    <%- end -%>
  <%- end -%>
<%- end -%>
<% ## Initialization done, starting to actually write the file ##-%>
auto lo
iface lo inet loopback

<% netconfig.sort.map do | card, value | -%><% ### Iterate cards (interface) ###-%>
  <%- default_gw_set = false -%>
<% ## Configuring  `card` ##-%>
### <%= card %> Configuration ###
allow-hotplug <%= card %>
iface <%= card %> inet manual
<% ### Bonding Begin ###-%>
  <%- if card.include?("bond") -%>
    # Bonding of multiple interfaces
    <%- bondcfg[card]['options'].split(' ').each do | opt | -%>
      <%- opt_key = opt.split('=')[0] -%>
      <%- opt_value = opt.split('=')[1] -%>
      <%- unless opt_value.empty? -%>
<%= '    bond-'+opt_key+' '+opt_value %>
      <%- end -%>
    <%- end -%>
<%= '    slaves '+bondcfg[card]['slaves'].join(' ') %>
    <%- bondcfg[card]['slaves'].each do | slcard | -%>
<%= '    post-up ip link set '+slcard+' up' %>
    <%- end -%>
<% ### Bonding End ###-%>
<% ### Bridging Begin ###-%>
  <%- elsif card.include?("br") -%>
    # Bridging of one or more interfaces
<%= '    bridge_ports '+bridgecfg[card]['ports'].join(' ') %>
<% ### Bridging End ###-%>
<% ### Physical Begin ###-%>
  <%- else -%>
    # Interface not bonded
<% ### Physical End ###-%>
  <%- end -%>
    post-up ip link set <%= card %> up
  <%- value.each do | ipadd | -%><% ### Iterate Addresses for this card ###-%>
<% ### Configure an address ###-%>
    <%- if card.include?("bond") -%>
    # clean slaves interface and kill all dhclient    
      <%- bondcfg[card]['slaves'].each do | slcard | -%>
    pre-up pkill -e -f "^dhclient.*<%= slcard %>" || true
    pre-up ip addr del <%= ipadd %> dev <%= slcard %> || true
      <%- end -%>
    <%- else -%>
    # clean dhclient
    pre-up pkill -e -f "^dhclient.*$IFACE" || true
    <%- end -%>
    <%- if card.include?("ib") -%>
    # Set mode
    pre-up echo <%= ib_mode %> > /sys/class/net/$IFACE/mode || true
    # Set mtu on ib cards
    pre-up ip link set $IFACE mtu <%= ib_mtu %> || true
    <%- end -%>
    post-up ip addr add <%= ipadd %> dev $IFACE || true
    pre-down ip addr del <%= ipadd %> dev $IFACE
<% ### Configure the default gateway if this address is in the same subnet ###-%>
    <%- begin -%>
      <%- range = IPAddr.new(ipadd)  -%>
    <%- rescue -%>
      <%- scope.function_warning(["Invalid IP address: #{ipadd}"]) -%>
      <%- next -%>
    <%- end -%>
    <%- unless defaultgw.empty? or default_gw_set -%>
      <%- addtrg = IPAddr.new(defaultgw) -%>
      <%- if range.include?(addtrg) -%>
        <%- default_gw_set = true -%>
    post-up ip route add default via <%= defaultgw %>
      <%- else -%>
    # default gateway <%= defaultgw %> not in range <%= range %>
      <%- end -%>
    <%- else -%>
    # A default gateway is not necessary for this network
    <%- end -%>
  <%- end -%><% ### Address iteration End ###-%>
  <%- if routnet.key?(card) -%><% ### Card as supplementary routes ? ###-%>
    <%- routnet[card].each do |route| -%><% ### Iterate supplementary routes ###-%>
<%= '    post-up ip route add ' + route +' dev $IFACE' %>
    <%- end -%><% ### Routes iteration End ###-%>
  <%- else -%>
<%= '    # This network has no supplementary routes' %>
  <%- end -%><% ### Card as supplementary routes ? ###-%>
<% end -%><% ### Card iteration End ###-%>
