##########################################################################
#  Puppet configuration file                                             #
#                                                                        #
#  Copyright (C) 2014-2017 EDF S.A.                                      #
#  Contact: CCN-HPC <dsp-cspit-ccn-hpc@edf.fr>                           #
#                                                                        #
#  This program is free software; you can redistribute in and/or         #
#  modify it under the terms of the GNU General Public License,          #
#  version 2, as published by the Free Software Foundation.              #
#  This program is distributed in the hope that it will be useful,       #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#  GNU General Public License for more details.                          #
##########################################################################


# Install slurm clients CLI and configure SLURM
#
# Slurm configuration is generated by merging a default configuration
# and the parameter `$config_options`. The value in `$config_options` has
# always the highest priority.
#
# = Network Topology
#
# The network topology file is activated if the `$enable_topology` is
# true. The content of the file should be provided line by line as the
# `$topology_options` parameter
#
# @param enable_topology   Enable the topology configuration file
#                          (default: true)
# @param packages_manage   Let this class installs the packages
# @param packages_ensure   Install mode (`latest` or `present`) for the
#                          packages (default: `present`)
# @param packages          Array of packages names
# @param topology_file     Destination of the network topology file
# @param topology_options  Content of the topology file (line array)
# @param enable_generic_scripts Configure Prolog/Epilog paths from
#                               `slurm-llnl-generic-scripts` (default:
#                               true)
# @param spank_plugins     Hash of spank plugins to deploy (default: {})
# @param spank_pkg_prefix  Prefix of spank plugins packages (default:
#                          'slurm-wlm-spank-plugin-')
# @param spank_conf_dir    Path to spank plugins configuration directory
#                          (default: '/etc/slurm-llnl/plugstack.conf.d')
class slurm (
  $packages_manage        = $::slurm::params::packages_manage,
  $packages_ensure        = $::slurm::params::packages_ensure,
  $enable_topology        = $::slurm::params::enable_topology,
  $topology_file          = $::slurm::params::topology_file,
  $topology_options       = $::slurm::params::topology_options,
  $packages               = $::slurm::params::packages,
  $config_file            = $::slurm::params::config_file,
  $partitions_file        = $::slurm::params::partitions_file,
  $gres_file              = $::slurm::params::gres_file,
  $config_options         = {},
  $partitions_options     = $::slurm::params::partitions_options,
  $gres_options           = [],
  $enable_generic_scripts = $::slurm::params::enable_generic_scripts,
  $spank_plugins          = $::slurm::params::spank_plugins,
  $spank_pkg_prefix       = $::slurm::params::spank_pkg_prefix,
  $spank_conf_dir         = $::slurm::params::spank_conf_dir,
) inherits slurm::params {

  ### Validate params ###
  validate_bool($packages_manage)
  if $packages_manage {
    validate_string($packages_ensure)
    validate_array($packages)
    validate_string($spank_pkg_prefix)
  }

  validate_bool($enable_topology)
  if $enable_topology {
    validate_array($topology_options)
  }

  validate_absolute_path($topology_file)
  validate_absolute_path($config_file)
  validate_absolute_path($partitions_file)
  validate_hash($config_options)
  validate_array($partitions_options)
  validate_array($gres_options)
  validate_bool($enable_generic_scripts)
  validate_hash($spank_plugins)
  validate_absolute_path($spank_conf_dir)

  # Merge into $_config_options:
  #  $::slurm::params::config_options_defaults
  #  $::slurm::params::config_options_generic_scripts [if $enable_generic_scripts]
  #  $config_options

  if $enable_generic_scripts {
    $_config_options_scripts = deep_merge(
                                  $::slurm::params::config_options_defaults,
                                  $::slurm::params::config_options_generic_scripts
                                )
  } else {
    $_config_options_scripts = $::slurm::params::config_options_defaults
  }

  $_config_options = deep_merge($_config_options_scripts, $config_options)

  anchor { 'slurm::begin': } ->
  class { '::slurm::install': } ->
  class { '::slurm::config': } ->
  anchor { 'slurm::end': }
}
