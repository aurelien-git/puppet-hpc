<% ########################################################################## -%>
<% #  Puppet configuration file                                             # -%>
<% #                                                                        # -%>
<% #  Copyright (C) 2014-2017 EDF S.A.                                      # -%>
<% #  Contact: CCN-HPC <dsp-cspit-ccn-hpc@edf.fr>                           # -%>
<% #                                                                        # -%>
<% #  This program is free software; you can redistribute in and/or         # -%>
<% #  modify it under the terms of the GNU General Public License,          # -%>
<% #  version 2, as published by the Free Software Foundation.              # -%>
<% #  This program is distributed in the hope that it will be useful,       # -%>
<% #  but WITHOUT ANY WARRANTY; without even the implied warranty of        # -%>
<% #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         # -%>
<% #  GNU General Public License for more details.                          # -%>
<% ########################################################################## -%>
#!/bin/bash
#####################################################################
# Script to check NFS HA Status
#
#  This script is called through a cron and kills keepalived if the
#  state is not consistent.
#
#  If this node has the VIP IP address it should:
#    - Have a running NFS server
#    - Have a working multipath setup 
#  
#
#####################################################################
# NOTE: This file is automatically generated by puppet.
# Changes to this file will be overwritten periodically by puppet!
#####################################################################
# TEMPLATE: {<%= @name %>}/<%= File.basename(__FILE__) %>
#####################################################################
# Puppet: mount_points.join(' ')
MOUNTPOINTS='<%= @mount_points.join(' ') %>'
# Puppet: lvm_vg
VGNAME='<%= @lvm_vg %>'
# Puppet: fence_method
FENCE_METHOD='<%= @fence_method %>'
# Puppet: partner
PARTNER='<%= @partner %>'
# Puppet: multipath_devices
MULTIPATH_DEVICES='<%= @multipath_devices.join(' ') %>'

export LANG=C
export LC_ALL=C

export PATH="/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin:${PATH}"


instance_type="${1}"
instance_name="${2}"
target_state="${3}"

current_name="$(basename $0)"

mkdir -p /var/log/hpc_nfs_ha_server
exec 1>> /var/log/hpc_nfs_ha_server/${current_name}.log 2>&1 

function vgtag_get () {
  local tag=''
  tag="$(vgs --noheadings -o vg_tags ${VGNAME} | tr -d ' ')"
  status=$?
  if [[ "x${status}" == "x0" ]]
  then
    logger -st ${current_name}.info "INFO: $(hostname) Read tag '${tag}' from ${VGNAME}"
  else
    logger -st ${current_name}.error "ERROR: $(hostname) Failed to read tag from ${VGNAME}"
  fi
  echo "${tag}"
  return ${status}
}

function check_multipath () {
  local devices="${@}"
  if [[ -z "${devices}" ]]
  then
    logger -st ${current_name}.info "INFO: $(hostname) No multipath device given, skipping check"
    return 0
  else
    logger -st ${current_name}.info "INFO: $(hostname) Checking multipath devices: ${devices}"
  fi
  
  status=0
  for device_name in ${devices}
  do
    state="$(echo 'list multipaths status' | multipathd -k | grep "^${device_name} " | awk '{print $6}')"
    if [[ "x${state}" == "xactive" ]]
    then
      logger -st ${current_name}.info "INFO: $(hostname) Multipath for ${device_name} is active."
    else
      logger -st ${current_name}.error "ERROR: $(hostname) Multipath for ${device_name} is not active (${state})."
      status=1
    fi
  done
  return ${status} 
}

function check_nfs_server () {
  showmount --no-headers -e $(hostname) &> /dev/null
  status=${?}
  if [[ "x${status}" == "x0" ]]
  then
    logger -st ${current_name}.info "INFO: $(hostname) Some filesystems are exported"
  else
    logger -st ${current_name}.error "ERROR: $(hostname) No filesystems exported"
  fi
  return ${status} 
}

function check_mount () { 
  local mount_points_list=( "${@}" )
  logger -st ${current_name}.info "INFO: $(hostname) checking mount points ${mount_points_list[@]}"
  status_to_return=0
  for mount_point in "${mount_points_list[@]}"
  do
    if mountpoint -q "${mount_point}"
    then
      logger -st ${current_name}.info "INFO: $(hostname) ${mount_point} is mounted"
    else
      logger -st ${current_name}.error "ERROR: $(hostname) ${mount_point} is not mounted"
      status_to_return=1
    fi
  done
  return ${status_to_return}     
}

function kill_keepalived () {
  logger -st ${current_name}.error "ERROR: $(hostname) Inconsistent state, killing keepalived"
  systemctl stop keepalived
  sleep 2
  for i in $(pgrep keepalived)
  do
    logger -st ${current_name}.info "INFO: $(hostname) Killing process ${i} (SIGTERM)"
    kill ${i}
  done
  sleep 2
  for i in $(pgrep keepalived)
  do
    logger -st ${current_name}.info "INFO: $(hostname) Killing process ${i} (SIGKILL)"
    kill -9 ${i}
  done
  exit 1
}

logger -st ${current_name}.info "INFO: $(hostname) Checking NFS HA state consistency."
check_multipath ${MULTIPATH_DEVICES} || kill_keepalived

if [[ "x$(vgtag_get)" == "x$(hostname)" ]]
then
  logger -st ${current_name}.info "INFO: $(hostname) Having the tag, need to check."
  check_mount ${MOUNTPOINTS} || kill_keepalived
  check_nfs_server || kill_keepalived
  logger -st ${current_name}.info "INFO: $(hostname) All checks are OK"
else
  logger -st ${current_name}.info "INFO: $(hostname) Don't have the tag, no other check"
fi

