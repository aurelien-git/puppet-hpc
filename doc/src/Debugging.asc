# Debugging

[[facts]]
Facts
-----

[[listing-facts]]
Listing facts
~~~~~~~~~~~~~

------------------------------------------------
# puppet facts find $(hostname) --render-as=yaml
------------------------------------------------

It's possible to use the `-d` (debug) flag with this command.

[[debugging-facts]]
Debugging facts
~~~~~~~~~~~~~~~

This small script can be used to obtain a more precise error when a fact
is failing:

-------------------------------------------------------------------------
#!/bin/bash

hpc_puppet_modules_dir=/admin/restricted/puppet-hpc/puppet-config/modules

for dir in /admin/restricted/puppet-hpc/puppet-config/modules/*
do
  FACTERLIB="$FACTERLIB:${dir}/lib/facter"
done

export FACTERLIB

facter "${@}"
-------------------------------------------------------------------------

All traditional `facter` flags are working:

--------------------------------------------------------------------------------------------------------
# ./hpc_facter -p --trace
undefined method `empty?' for nil:NilClass
/admin/restricted/puppet-hpc/puppet-config/modules/hpclib/lib/facter/network.rb:91:in `<top (required)>'
/usr/lib/ruby/vendor_ruby/facter/util/loader.rb:130:in `load'
/usr/lib/ruby/vendor_ruby/facter/util/loader.rb:130:in `kernel_load'
/usr/lib/ruby/vendor_ruby/facter/util/loader.rb:115:in `load_file'
/usr/lib/ruby/vendor_ruby/facter/util/loader.rb:49:in `block (2 levels) in load_all'
/usr/lib/ruby/vendor_ruby/facter/util/loader.rb:47:in `each'
/usr/lib/ruby/vendor_ruby/facter/util/loader.rb:47:in `block in load_all'
/usr/lib/ruby/vendor_ruby/facter/util/loader.rb:45:in `each'
/usr/lib/ruby/vendor_ruby/facter/util/loader.rb:45:in `load_all'
/usr/lib/ruby/vendor_ruby/facter/util/collection.rb:104:in `load_all'
/usr/lib/ruby/vendor_ruby/facter.rb:126:in `to_hash'
/usr/lib/ruby/vendor_ruby/facter/application.rb:46:in `run'
/usr/bin/facter:9:in `<main>'
--------------------------------------------------------------------------------------------------------
