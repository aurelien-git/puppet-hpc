[[devgl]]
= Development Guidelines

This chapter gives some guidelines to help contributing to Puppet-HPC source
code development. Additionally to these guidelines, this chapter also set some
rules to follow, in order to make sure the code base stay consistent in the
long term.

Puppetlabs, the company who maintain Puppet software, provides a reference
style guide available online at this URL:
https://docs.puppet.com/guides/style_guide.html

Puppet-HPC source code must respect the conventions defined in this reference
style guide. All the guidelines defined in this chapter aim to be complementary
to this reference style guide. In case of conflict between the 2 documents, the
rules published in the reference style guide take predecessence over the rules
defined in this chapter.

All portions of code that do not fully respect those rules must be considered
as bugs and must be tracked as such.

[[devgl-rules]]
== Main rules

There are few goals and principles that rule the overall architecture of
Puppet-HPC code base:

* *Wise genericity*: respect <<concept-genericity,genericity goals>> but stay
  practical.
* *Simple profiles*: only parameters that could not be defined in other layers
  of the stack.
* *Minimized hieradata*: only usefull parameters defined at the right level.
* *Convention over configuration*: prefer clearly defined conventions and
  specifications rather than systematic configurability and overridability.

The following sections fully explain in details how to achieve those principles
in every components of the stack.

[[devgl-style]]
== Language settings

The Puppet-HPC configuration uses the parser from Puppet < 4 (not the future
parser). Modules must not use constructs that are only available with the
parser from Puppet 4 (__ex:__ `foreach`). Compatibility with the future parser
is encouraged though.

It is assumed that the manifest will be applied with the following setting in
`puppet.conf`:

---------------------
stringify_facts=false
---------------------

This setting permits facts to define advanced data structures such as hashes
and arrays.

== Hieradata

The hieradata is a database of parameters. As stated in the
<<concept-hieralevels,Hieradata levels>> section of the concept chapter, the
hieradata is a stack of levels, each upper level being more specific to a
smaller context. The parameters must always be defined at the lowest possible
level of the stack (**ie.** the most generic). Obviously, if the parameter is
defined in files below the cluster specific files, the parameter does not have
to be duplicated from cluster to cluster and the cluster configuration is
simpler.

There are multiple types of parameters in Hiera. In the first sub-section, the
various types are defined. Then, all details and rules for each type are given.

[[devgl-data-types]]
=== Parameter types

The hieradata contains many parameters that can classified into four main
categories:

* *shared parameters*: generic parameters used in several places accross
  hieradata, facts, functions and profiles.
* *simple parameters*: parameters dedicated to a module or a profile.
* *advanced parameters*: complex structures providing either a set of
  configuration settings or resources definitions to a profile.

The following schema represents how these various types of parameters can be
used inside Puppet-HPC:

[[img-params_types_workflows]]
.Parameters types and workflow
image::src/img/hieradata_params_workflow.pdf[width=400]

Full details are given in the following sub-sections.

=== Shared parameters

Shared parameters are generic parameters that are used several times in
hieradata (using <<devgl,interpolation>>), custom facts, custom parser
functions and profiles. The shared parameters should be used wisely. They
should be used only where relevant to avoid clear duplication of data.

Their value must either be a string or an integer.

The shared parameters names can only contain letters and underscores. **Ex:**

* `timezone`
* `slurm_master`

All shared parameters required by Puppet-HPC must be defined in the common
downmost level of hieradata. Some shared parameter cannot have a sane default
value at this level though, **eg.** the domain name. In this case, the value
must clearly state it is wrong (**ex:** `FROM_COMMON_LVL_CHANGEME`). This way,
users can easily spot them and clearly figure out they must be overriden in
upper levels of their private hieradata.

=== Simple parameters

Strictly speaking, simple parameters are all parameters that are not of the
other types of parameters (**ie**: shared parameters, configuration set or
resource definition).

Their value can be of any type: string, integer, boolean, array or hash.

A simple parameter must either be:

* a module public class autolookup parameter,
* or a profile parameter.

A module parameter must not be imported by a profile.

Module parameters names are necessarily prefixed by the public class, this is
requirement for hiera. For example, the parameter *opt* of the public class
`soft::server` must be named `soft::server::opt`. Profiles parameters rules are
given in the <<devgl-profiles,profiles section>>.

[[devgl-advparams]]
=== Advanced parameters

Advanced parameters provide either provide a set of configuration settings or
resource definitions.

Their value must either be a hash or an array.

:puppetfunc: https://docs.puppet.com/puppet/latest/reference/function.html

Configuration sets must be imported by profiles using the hiera function
{puppetfunc}#hieraarray[`hiera_array()`] and
{puppetfunc}#hierahash[`hiera_hash()`]. Unlike the `hiera()` function or hiera
autoloopkups, these functions can merge the elements coming from multiple levels
of the hieradata. This is really convenient because all the configuration
settings can be defined at their highest level of genericity in the hieradata
stack. This way, most settings can be defined once for several clusters and the
cluster specific hieradata levels only contain the cluster specific values.

This behaviour is illustrated in the following schema:

[[img-hiera_merge_multi-clusters]]
.Merge behaviour of hiera advanced functions
image::src/img/hiera_hash_multi-cluster.pdf[width=500]

[[devgl-interpolation]]
=== Interpolation

Hiera support internal 
https://docs.puppet.com/hiera/3.2/variables.html[interpolation] of parameters.
This feature is really usefull to help factorizing many settings. Its usage is
definitely recommended in Puppet-HPC but it must be limited to the following
parameters:

* Shared parameters,
* Standard facts,
* **hpclib** custom facts.

This implies it is not allowed to interpolate profile or module autoloopkup
parameters. For example, this is considered safe:

[source]
----
shared_parameter: value
profiles::soft::param: "%{hiera('shared_parameter')}"
----

However, the following two examples are considered unsafe in Puppet-HPC:

[source]
----
soft::param: value
profiles::soft::param: "%{hiera('soft::param')}"
----

[source]
----
profiles::soft::param: value
soft::param: "%{hiera('profiles::soft::param')}"
----

[[devgl-mods]]
== Modules

[[devgl-mods-dependencies]]
=== Dependencies

Puppet-HPC internal modules must be fully autonomous and must not depend to any
other module except on the <<mod-hpclib,hpclib>> internal module and
https://forge.puppet.com/puppetlabs/stdlib[stdlib] external community module.
These modules do not manage real resources. They just provide a set of
functions, facts and defined types. Therefore, they can safely be considered as
libraries for the other modules.

The special `hpc_*` internal modules are also exceptions: they can depend on
one (and only one) other external community module (ex: `hpc_ha` depends on
`keepalived`). Those modules are actually __wrappers__ over other external
community modules in order to give an high-level interface both more pratical
and specialized for the HPC clusters specific needs to the profiles without
modifying the structure of the underlying module.

[[devgl-mods-inh]]
=== Classes inheritance

Modules are notably composed of a set of manifests containing classes. There
are two types of classes:

* *public* classes: these classes can be called by the profiles and can receive
  arguments.
* *private* classes: these classes are called only by other classes from the
  same module. Generally, the private classes do not receive arguments as they
  inherit the public classes and get access to all their variables this way.

There must be a private class `params` for each public class. For example,
there must be a private `software::params` private class for a `software`
public class. The `params` private class defines the default values of the
public class parameters, including its arguments. A public class must inherit
of its corresponding `params` class.

A public class should not manage any resource by itself. The resources must be
delegated to the private sub-classes. The resources must be grouped by
sequentials __deployment steps__. A step must be managed by a specific private
class. The common steps are:

* *install*: install packages and files (including directories) required by the
  technical component.
* *config*: manage the configuration parameters of the technical component.
* *services*: manage the services of the technical component.

This list is not exhaustive and can be adapted to specific cases.

[NOTE]
===============================
There is generally some confusions to define whether some files are part of the
__install__ or the __config__ step. Considering the software component follow
main rules of the http://http://www.pathname.com/fhs/[FHS], a file under `/etc`
is part of the __config__ step. It is part of the __install__ step otherwise.
===============================

Each step must be managed by a specific private class. For example,
`software::install`, `software::config` and `software::service`. These private
classes must be called sequentially by the public class, using ordering arrows
delimited by anchors. Please refer to <<devgl-mods-ex,modules examples>>
section for full examples.

[[devgl-mods-params]]
=== Parameters

Modules are controlled by a large set of parameters which defines their
behaviour, resources settings, paths and so on. Each paramater is a variable
defined in a public class of a module. There are two types of parameters:

* __public parameters__ whose values can be set by Hiera auto-lookup or by
  profiles through the <<devgl-mods-args,arguments>>.
* __private parameters__ which are defined in the public class of the module.
  These parameters generally store the result of a function from `stdlib` or
  `hpclib` modules based on the values of some other public parameters. The
  variable name of these parameters must be prefixed by an underscore `_`
  (__ex:__ `$_config_options`).

All public classes must have a parameter named `<step>_manage` for each
deployment step it manages. For example, if a public class has 3 deployment
steps `install`, `services` and `config`, there must be the following 3 public
parameters:

* `install_manage`
* `services_manage`
* `config_manage`

If the public class also manages packages, typically within the install step,
there must also be a `packages_manage` parameter.

These parameters are all booleans. They must control whether the resources of
the step are actually managed by the public class.

There other few parameters names conventions to follow:

* The parameter defining the list of packages must be named `packages`.
* The parameter handling the list of services must be named `services`.
* Parameters which define advanced configuration structures (such as hashes)
  must be suffixed by `_options` (__ex:__ `config_options`).

Parameters types must be checked at the beginning of public classes code using
`validate_*()` functions of the stdlib module. The tests of parameters types
must be conditioned by the `<step>_manage` parameter of the step they are
involved. For example, the `packages` parameter type must be checked only if
`packages_manage` parameter is true.

[[devgl-mods-args]]
=== Arguments

Public classes accept arguments. There must be arguments for every public
parameters of a public class. The values of these arguments must default to the
variables inherited from the corresponding `params` class, with 2 exceptions:

* When there is no sane possible default value, typically for security reasons
  (__ex:__ password) or because it highly depends on the context (__ex:__
  network domain). In this case, the arguments must be placed in first
  positions in the arguments lists.
* For configuration structures. It is generally usefull to combine settings
  given in arguments by profiles and default settings coming from the `params`
  class using `merge()` and/or  `deep_merge()` functions from the stdlib
  module. This way, it becomes unecessary to define *all* the parameters in the
  structure in argument, the profile can simply gives to parameters to add or
  to override in the defaults. In this case, the default values must of the
  argument be an empty hash or an empty array, depending its type.

[[devgl-mods-ex]]
=== Examples

This section contains two full examples of puppet module, one *simple* module
with one public class and another *complex* modules with two public classes.

:examplesdir: ../../examples

==== Simple example

The *simple* module simply install packages and launch services. The private
class `simple::config` is a no-op.

File `init.pp`:

[source]
----
include::{examplesdir}/modules/simple/init.pp[]
----

File `params.pp`:

[source]
----
include::{examplesdir}/modules/simple/params.pp[]
----

File `install.pp`:

[source]
----
include::{examplesdir}/modules/simple/install.pp[]
----

File `config.pp`:

[source]
----
include::{examplesdir}/modules/simple/config.pp[]
----

File `service.pp`:

[source]
----
include::{examplesdir}/modules/simple/service.pp[]
----

==== Complex example

The *complex* module has two public classes: `complex::client` and
`complex:server`. There is not `init.pp` manifest file but there are instead
manifests files for each public class. The privates classes are defined in
manifests located inside a the sub-directory of their respective public class.
*Ex:* `complex::server::install` private class associated to `complex::server`
public class is defined in `install.pp` manifest inside `server` sub-directory.

File `client.pp`:

[source]
----
include::{examplesdir}/modules/complex/client.pp[]
----

File `client/params.pp`:

[source]
----
include::{examplesdir}/modules/complex/client/params.pp[]
----

File `client/install.pp`:

[source]
----
include::{examplesdir}/modules/complex/client/install.pp[]
----

File `client/config.pp`:

[source]
----
include::{examplesdir}/modules/complex/client/config.pp[]
----

File `server.pp`:

[source]
----
include::{examplesdir}/modules/complex/server.pp[]
----

File `server/params.pp`:

[source]
----
include::{examplesdir}/modules/complex/server/params.pp[]
----

File `server/install.pp`:

[source]
----
include::{examplesdir}/modules/complex/server/install.pp[]
----

File `server/config.pp`:

[source]
----
include::{examplesdir}/modules/complex/server/config.pp[]
----

File `server/service.pp`:

[source]
----
include::{examplesdir}/modules/complex/server/service.pp[]
----

[[devgl-profiles]]
== Profiles

Profiles instanciate modules public classes. Optionally, they can provide a set
of arguments to the public classes.

Technically speaking, profiles are Puppet classes defined in manifests grouped
into one *profiles* just like classic generic modules. It is possible to define
arbitrary levels of sub-classes but classes inheritances must be avoided between
profiles classes for the sake of clearness and simplicity. For example, the
profiles classes `profiles::soft::server` and `profiles::soft::client` can be
defined but they cannot inherit from an hypothetical parent `profiles::soft`
class.

As previously stated in the <<devgl-rules,main rules>>, the profiles must stay
as simple as possible: they should only manipulate parameters that have to be
manipulated at this layer of the stack. It includes the following parameters:

* Results of `hiera_array()` and `hiera_hash()` calls on advanced parameters,
  for the reasons explained in the <<devgl-advparams,advanced parameters
  section>>.
* Results of **stdlib** and **hpclib** function calls because Puppet functions
  cannot be called directly in hiera.
* Results of `hiera*()` functions when multiple profiles provide different
  argument values to the same module public class (case C in
  <<img-autolookup_vs_profs,schema>>).
* Parameters whose values are computed based on the above parameters.

It implies that hiera autolookups must be preferred over profiles parameters
when possible (case A is preferred over case B in
<<img-autolookup_vs_profs,schema>>).

[[img-autolookup_vs_profs]]
.Autolookup **vs** profiles parameters
image::src/img/hieradata_params_autolookup_vs_profs.pdf[]

Profiles can only import the following types of parameters from hieradata:

* Shared parameters, as defined in <<devgl-data-types,parameters types>>
  section.
* Profiles parameters.

The profiles parameters must be prefixed by `profiles::<profile>` where
`<profile>` is the name of the profile. A parameter can be imported by multiple
profiles classes sharing sharing a sub-class namespace. For example, the
`profiles::soft::server` and `profiles::soft::client` classes can
share profile parameters because there are both in the `profiles::soft`
sub-class namespace. However, `profiles::monitoring` and `profiles::scheduler`
cannot share profile parameters. If a parameter is shared by multiple profiles
classes, `<profile>` must be replaced by the highest common sub-class
namespace. For example:

* a parameter shared by `profiles::monitoring::client` and
  `profiles::monitoring::server` must be prefixed by `profiles::monitoring`.
* a parameter shared by `profiles::env::soft::client` and
  `profiles::env::soft:server` must be prefixed by `profiles::env::soft`.

When importing hash or array parameters from hiera, the profiles must set the
default value with an empty structure with the second argument of
`hiera_{hash,array}()` functions. **Ex:**

[source]
----
hiera_hash('profile::soft::param', {})
----

Profiles cannot import parameters autolookup-ed by modules.

Profiles cannot define resources. The standard `create_resource()` function and
**stdlib** `ensure_resource()` function are just wrappers over resources
definitions. Therefore, they are also prohibited inside profiles classes.

== Roles

As stated in the <<concept-roles,roles section of the concept chapter>>, a role
is a set of profiles. Puppet-HPC requires that this list of profiles is an array
in the `profiles` parameter of the hieradata. It has to be defined in the
<<concept-hieralevels,role level of the hieradata>> in order to be different
from one role to another.

This a requirement in Puppet-HPC because *hpclib* module functions extracts
roles and profiles definitions from the hieradata.

As explained in the <<concept-genercity,project genericity goals>>, the roles
are specific to each cluster. Owing to this charateristic, the role level of
the hieradata must stay as small as possible to avoid duplications of
parameters from one cluster to another. Ideally, it should only contain the
profiles array. In particular, settings that are closely coupled to the general
architecture of Scibian HPC clusters or settings that be directly be deduced
from other parameters must not be defined in this level of the hieradata.

== Advanced processing

For the sake of consistency and coherency, it is sometimes relevant to define
advanced data structures in the hieradata (**ex**: networks settings)
irrespectively of modules expectations. These data structures have to be
processed then by some logic to generate other runtime temporary data
structures ready to be consumed by modules.

There two ways to process data extracted frim hieradata in Puppet:

* https://docs.puppet.com/facter/3.5/custom_facts.html[Custom facts],
* https://docs.puppet.com/guides/custom_functions.html[Custom parser functions].

Facts have the advantage of being usable directly in the hieradata, quite the
opposite of Puppet parser functions. But facts are processed unconditionnaly,
it is therefore important to keep them consistent and light. In Puppet-HPC,
facts are considered relevant for very generic parameters used in many places
accross the hieradata. For other processing, typically for generating resources
hash definitions, Puppet parser functions are largely preferred.

== Debugging

=== Static analysis

Puppet-HPC provides a script `validate.sh` to check both the syntax and the code
style of the modules. To check the syntax, run the following command:

[source]
----
$ puppet-config/validate.sh --syntax
----

The script must print `Syntax OK` for all files, otherwise errors must be fixed.

To check the code style, run the following command:

[source]
----
$ puppet-config/validate.sh --lint
----

The script must not print any `ERROR` or `WARNING`, otherwise they must be
fixed.

The script can eventually take a module name in parameter to restrict the check
on this module.

Internally , the script actually runs the `puppet-lint` command. The command can
also be ran manually using the following addtionnal parameters:

* `--no-class_inherits_from_params_class-check`: the configuration does not
  support puppet < 3.0, so this check is ignored
* `--no-80chars-check`: the limit in the style guide is 140 characters, but
  `puppet-lint` in Debian Jessie is not up to date.

== Documentation

=== Module

Each module must be accompanied by a `README.md` file located at the root
directory of the module. This file must be formatted in
https://en.wikipedia.org/wiki/Markdown[markdown] markup language. The content of
this file must respect the official
https://docs.puppet.com/puppet/4.8/modules_documentation.html[Puppet modules
documentation specifications] in terms of content and format, except for the
**Reference** section. This section is replaced by inline manifest documentation
using https://github.com/puppetlabs/puppet-strings[Puppet strings] format.

=== Profiles

All profiles must be documented inline using Puppet strings format as well. In
the heading comments of each profile manifests, there must be a `Hiera` section
which contains the list of expected hieradata parameters along with their
description, types and optionnaly examples of values.

// vim: set syntax=asciidoc:
