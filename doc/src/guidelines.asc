[[devgl]]
= Development Guidelines

[[devgl-mods]]
== Modules

[[devgl-mods-dependencies]]
=== Dependencies

////
TODO: explain module inter-dependencies rules. eg: forbidden except [hpclib]
and [stdlib] defined types, facts and functions. The external modules can be
called from special hpc_* modules only. Also explain roles of hpc_* modules
and in which cases they are allowed.
////

=== Internals

////
TODO: explain modules common internals.

Quick draft:

Public classes and privates classes. Privates classes group resources by
types.

Puppet development guidelines (+ specifics)

* manage_install
* manage_packages
* manage_services
* manage_config

Parameters names conventions:

-*_options: configuration hashes
-*_

Parameters types must be check at the beginning of public classes codes. The
tests of parameters types must be conditioned by manage_* parameters. Eg. the
$packages parameter type must be checked only if $manage_package is true.

All parameters should have default values inherited from params.pp class, with
2 exceptions:

* When there is no sane possible default value, eg. encryption key. Those
  parameters should be placed in first positions in arguments lists.
* For configuration hashes when it is useful to use merge() and/or deep_merge()
  functions. In this case, parameters default values must be an empty hash or
  an empty array depending on their type.
////

[[devgl-mods-internals-style]]
==== Style and language

Puppetlabs provides a style guide that should be respected by all modules:
https://docs.puppet.com/guides/style_guide.html

The Puppet HPC configuration uses the parser from Puppet < 4 (not the future
parser). Modules must not use constructs that are only available with the
parser from Puppet 4 (`foreach`...). Compatibility with the future parser is
encouraged though.

It is assumed that the manifest will be applied with the following setting in
`puppet.conf`:

---------------------
stringify_facts=false
---------------------

This setting permits facts to define data structures (hash, array...).

The configuration provides a script `validate.sh` that checks the syntax with
`puppet-lint`. You can use it or run `puppet-lint` yourself with the following
arguments:

* `--no-class_inherits_from_params_class-check`, the configuration does not
  support puppet < 3.0, so this check is ignored
* `--no-80chars-check`, the limit in the style guide is 140 characters, but
  `puppet-lint` in Debian Jessie is not up to date

== Profiles

////
TODO: Explain what profiles are supposed/allowed to do. eg:

* hiera_hash()
* function calls

No resource definitions (even create_resource with defined types).
////

== Roles

////
TODO: give roles definitions guidelines.

Quick draft:
Roles must be defined in hiera because hpclib functions extracts those
definitions from hiera backends.

Parameters definitions other then profiles array must be avoided as much as
possible in the role level of hieradata hierarchy. Roles are specific to a
cluster, then if a configuration

because roles are specific to a cluster configurations that  must not be duplicated
////

== Advanced processing

////
TODO: explain advanced data processing guidelines, notably that functions are
preferred over facts. Explain why? Explain exceptions.
////

== Data placement

////
TODO: explain this is the hard part with advanced hiera hierarchy, profiles and
generic modules: where to place parameters?
////

=== Main goals

////
TODO

Quick draft:
* Minimized hieradata
* Simple profiles
* Allow overrides when relevant
* Parameters are defined in the highest possible level of the hieradata hierarchy
////

=== Parameter types

////
TODO: show the differences between various parameters types in hiera

Quick draft:

* shared parameters: used in several hiera interpolations, by functions or
  multiple profiles.
* simple parameters: provide a simple value for a module or a profile.
* configuration sets: complex structures providing configuration parameters
  sets
* resources definitions: complex structures providing resources definitions for
  defined types or ressources
////

=== Shared parameters

////
TODO: give shared parameters rules.

Quick draft:

The shared parameters names can only contain letters and underscores. Ex:

* `localtime`
* `domain_global`

All shared parameters required by Puppet-hpc must be defined in the common
level of hieradata. Some shared parameter cannot have good default value, eg.
the domain name. In this case, they must be clearly stated to be easily spotted
by users in order to override them in their private hieradata.

The shared parameters should be used wisely. They should be used only where
relevant to avoid clear duplication of data.
////

=== Simple parameters

////
TODO: give simple parameters rules.

quick draft:

The common hieradata level should not contain autolookups for internal modules

Those parameters must be defined in the highest possible level of the hieradata hierarchy.

Those parameters are either autolookup parameters. In this case, rofiles specific variables.

The common level of the hieradata should not contain autolookup simple
parameters except those defined by interpolations.
////

== Hieradata interpolation

////
TODO: give hieradata interpolation rules.

quick draft:

Hieradata interpolation is possible only with:

* shared parameters
* standard facts
* hpclib facts
////

== Configuration sets

////
TODO: explain they must go through hiera_hash() and therefore profiles params.
////

=== Resources definitions

////
TODO: explain they must go through hiera_hash() or hiera_array()
////

== Debugging

////
TODO: document debugging scripts usage.
////

== Documentation

////
TODO: Explain what is expected in terms of documentation in Puppet code for
reference API documentation (profiles, modules) with format and tools.
////
