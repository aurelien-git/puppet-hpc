[[internals-writing-modules]]
= Writing Modules

== Feature set

The Puppet HPC configuration uses the parser from Puppet < 4 (not the future
parser). Modules must not use constructs that are only available with the
parser from Puppet 4 (`foreach`...). Compatibility with the future parser is
encouraged though.

You must assume that the manifest will be applied with the following setting in
`puppet.conf`:

---------------------
stringify_facts=false
---------------------

The configuration provides a script `validate.sh` that checks the syntax with
`puppet-lint`. You can use it or run `puppet-lint` yourself with the following
arguments: 

* `--no-class_inherits_from_params_class-check`, the configuration does not
  support puppet < 3.0, so this check is ignored
* `--no-80chars-check`, the limit in the style guide is 140 characters, but
  `puppet-lint` in Debian Jessie is not up to date

== Style

Puppetlabs provides a style guide that should be respected by all modules:
https://docs.puppet.com/guides/style_guide.html

== Classes

A class with the same name as the service should exist, this class inherits a
`params` class that defines default values for the software. Defaults should
change when appropriate (eg. different package names for different OS).

Most modules follow a pattern where the following subclasses are defined:

* `install`, install the packages and other files
* `config`, setup the software (write configuration files)
* `service`, configure and launch the service

Classes `install`, `config` and `service` should inherit the main module class.
They are included by the main module class with the proper requirements
(typically `install` -> `config` -> `service`).

This pattern is used by the NTP module from the puppetlabs forge:
https://github.com/puppetlabs/puppetlabs-ntp

If a module has multiple subclasses (a client and a server for example). This
pattern can be replicated in a subdirectory of `manifests`. The `mysql` module
from the puppetlabs forge does this:
https://github.com/puppetlabs/puppetlabs-mysql

== Variables

To maintain consistency between modules, some recurring variables and/or
parameters should use the following standardised names:

* `service`, the name of the service for this software (string)
* `service_ensure`, should the service be 'running' or 'stopped'
* `service_enable`, should the service be started on boot (boolean) 
* `config_enc`, encrypted source of a configuration file (see the
  `hpclib::decrypt`` function) (string)
* `config_file`, absolute file path of the configuration file (string)
* `config_options`, hash with the values to put in the `config_file` (hash)
* `packages`, list of packages to manage for this software (array of strings)
* `packages_ensure`, state of the packages: 'latest' or 'installed'
* `default_file`, configuration file path for init system ('/etc/default/xxx' or
  '/etc/sysconfig/xxxx') 
* `default_options`, values to put in the `default_file` (hash)

If the module has multiple configuration files, the pattern 'XXXX_enc',
'XXXX_file' and 'XXXX_options' should be kept.

// vim: set syntax=asciidoc: 
