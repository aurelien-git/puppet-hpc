[[internals-writing-modules]]
= Internals - Writing Modules

== Feature set

The Puppet HPC configuration uses the parser from Puppet < 4 (not the future
parser). Modules must not use constructs that are only available with the
parser from Puppet 4 (`foreach`...). Compatibility with the future parser is
encouraged though.

You must assume that the manifest will be applied with the following setting in
`puppet.conf`:

---------------------
stringify_facts=false
---------------------

The configuration provides a script `validate.sh` that checks the syntax with
`puppet-lint`. You can use it or run `puppet-lint` yourself with the following
arguments: 

* `--no-class_inherits_from_params_class-check`, the configuration does not
  support puppet < 3.0, so this check is ignored
* `--no-80chars-check`, the limit in the style guide is 140 characters, but
  `puppet-lint` in Debian Jessie is not up to date

== Style

Puppetlabs provides a style guide that should be respected by all modules:
https://docs.puppet.com/guides/style_guide.html

== Classes

A class with the same name as the service should exist, this class inherits a
`params` class that defines default values for the software. Defaults should
change when appropriate (eg. different package names for different OS).

Most modules follow a pattern where the following subclasses are defined:

* `install`, install the packages and other files
* `config`, setup the software (write configuration files)
* `service`, configure and launch the service

Classes `install`, `config` and `service` should inherit the main module class.
They are included by the main module class with the proper requirements
(typically `install` -> `config` -> `service`).

This pattern is used by the NTP module from the puppetlabs forge:
https://github.com/puppetlabs/puppetlabs-ntp

If a module has multiple subclasses (a client and a server for example). This
pattern can be replicated in a subdirectory of `manifests`. The `mysql` module
from the puppetlabs forge does this:
https://github.com/puppetlabs/puppetlabs-mysql

== Variables

To maintain consistency between modules, some recurring variables and/or
parameters should use the following standardised names:

* `service`, the name of the service for this software (string)
* `service_ensure`, should the service be 'running' or 'stopped'
* `service_enable`, should the service be started on boot (boolean) 
* `config_enc`, encrypted source of a configuration file (see the
  `hpclib::decrypt`` function) (string)
* `config_file`, absolute file path of the configuration file (string)
* `config_options`, hash with the values to put in the `config_file` (hash)
* `packages`, list of packages to manage for this software (array of strings)
* `packages_ensure`, state of the packages: 'latest' or 'installed'
* `default_file`, configuration file path for init system ('/etc/default/xxx' or
  '/etc/sysconfig/xxxx') 
* `default_options`, values to put in the `default_file` (hash)

If the module has multiple configuration files, the pattern 'XXXX_enc',
'XXXX_file' and 'XXXX_options' should be kept.

== Documentation

All modules should have a file `README.md` at the root of the module. This
file should follow the guidelines spelled out in the Puppetlabs Style Guide.

Even if the Puppet HPC configuration does not yet use the future parser, the
class/resource documentation uses puppet strings:
https://github.com/puppetlabs/puppetlabs-strings

The use of this tool makes the writing of the *reference* section in the
README.md file redundant.

Code comments should use the markdown syntax (as recommended by the puppet
strings documentation). The root of the module should include a `.yardopts`
file with the following content:

---------------------
--markup=markdown
--markup-provider=redcarpet
--verbose
---------------------

== Testing

Automatic module testing is based on rspec-puppet (http://rspec-puppet.com/)
and puppetlabs-spec-helper
(https://github.com/puppetlabs/puppetlabs_spec_helper). These two are packaged
for Debian 8 in packages ruby-rspec-puppet and ruby-puppetlabs-spec-helper.

All modules should have a minimal batch of rspec-puppet tests to ensure the
module can compile.

Indications on how to write test cases can be found here :
* https://puppet.com/blog/next-generation-of-puppet-module-testing
* http://rspec-puppet.com/tutorial/

=== Files

Some files are necessary at the root of the module to implement the tests :
* Rakefile :
---------------------
require 'rake'
require 'rspec/core/rake_task'
require 'puppetlabs_spec_helper/rake_tasks'
require 'rubygems'
require 'puppetlabs_spec_helper/module_spec_helper'
require 'puppet-lint/tasks/puppet-lint'


desc "Run all RSpec code examples"
RSpec::Core::RakeTask.new(:rspec) do |t|
  t.rspec_opts = File.read("spec/spec.opts").chomp || ""
end

SPEC_SUITES = (Dir.entries('spec') - ['.', '..','fixtures']).select {|e| File.directory? "spec/#{e}" }
namespace :rspec do
  SPEC_SUITES.each do |suite|
    desc "Run #{suite} RSpec code examples"
    RSpec::Core::RakeTask.new(suite) do |t|
      t.pattern = "spec/#{suite}/**/*_spec.rb"
      t.rspec_opts = File.read("spec/spec.opts").chomp || ""
    end
  end
end
task :default => :rspec

begin
  if Gem::Specification::find_by_name('puppet-lint')
    require 'puppet-lint/tasks/puppet-lint'
    PuppetLint.configuration.ignore_paths = ["spec/**/*.pp", "vendor/**/*.pp"]
    task :default => [:rspec, :lint]
  end
rescue Gem::LoadError
end
---------------------
* .fixtures.yml :
File used by the common rake tasks to automatically install dependencies for 
test runs.
This file should indicate how to access to all the dependancies.
For example, this a .fixture.yml file for a module called `ctorrent` using 
the `puppetlabs-stdlib` module installed via the standard debian package :
---------------------
fixtures:
  symlinks:
    ctorrent: "#{source_dir}"
    stdlib: '/usr/share/puppet/modules/stdlib' 
---------------------

* spec/spec.opts :
Used to indicate options to use with rspec
---------------------
--format s --colour --backtrace
---------------------

* spec/classes/*.rb
Files containing rspec tests for classes of the module. It should contain at 
least one test for the main class of the module verifying it can compile.
Exemple below :
---------------------
# cat init_spec.rb 
require 'spec_helper'                
describe 'ctorrent' do
  context 'The following classes should be present in the catalog' do
    
    it { should compile }                # this is the test to check if it compiles. 
  
  end
end
---------------------
All the test cases concerning a class are written inside one file. The name of
this file must be `[class_name]_spec.rb`.

* spec/defines/*.rb
Files containing rspec tests for defines of the module.

* spec/functions/*.rb
Files containing rspec tests for functions of the module.

=== Launching tests

Tests are launched via Rake tasks:

---------------------
#rake help
rake help
rake build            # Build puppet module package
rake clean            # Clean a built module package
rake coverage         # Generate code coverage information
rake help             # Display the list of available rake tasks
rake lint             # Check puppet manifests with puppet-lint / Run puppet-lint
rake rspec            # Run all RSpec code examples
rake rspec:classes    # Run classes RSpec code examples
rake rspec:defines    # Run defines RSpec code examples
rake rspec:functions  # Run functions RSpec code examples
rake rspec:hosts      # Run hosts RSpec code examples
rake spec             # Run spec tests in a clean fixtures directory
rake spec_clean       # Clean up the fixtures directory
rake spec_prep        # Create the fixtures directory
rake spec_standalone  # Run spec tests on an existing fixtures directory
---------------------

The main command to use is `rake spec`. It will create the dependancies in 
`spec/fixtures/` directory, run the rspec code and finally clean the test
directory. Same result can be achieved by running successively 
`rake spec_prep`, `rake spec_standalone` and `rake spec_clean`.

When running the tests, results are clearly indicated :

---------------------
#rake spec
/usr/bin/ruby2.1 -S rspec spec/classes/init_spec.rb --color
........

Finished in 2.07 seconds
8 examples, 0 failures
---------------------

// vim: set syntax=asciidoc: 
