[[arch-encrypt]]
== Sensible data encryption

The configuration of a HPC cluster is necessarily composed of various sensible
data: passwords, keys, sensible parameters and so on. These data must not be
published in a clear state into SCM repositories potentially available to third
parties, in which case the security of the cluster and the organization would
not be ensured. In the other hand, it is convenient to save these data into SCM
repositories since changes are tracked and rollbacks are possibles. Puppet-HPC
stack provides a cryptopraphy model to encrypt the sensible data and securily
save them in the internal SCM repository.

[[arch-encrypt-keys]]
=== Encryption keys

There are 2 encryption keys involved in Puppet-HPC :

- an asymmetric PKCS7 key pair for encrypting values in the clusters specific
  layers of the Hiera repository, based on eyaml software.
- a symmetric AES key for encrypting files. The encrypted files are stored into
  the files directory of the <<arch-internalrepo,internal repository>>. This key
  is used in combination with https://github.com/edf-hpc/clara[clara] `enc`
  plugin for managing encrypted files.

These keys are specific to a cluster, each cluster has its own set of encryption
keys. The keys must be generated at the beginning of the cluster installation.

Since these keys protect all the sensible data of a cluster, they must be very
securely manipulated themselves. They are mutually encrypted before being saved
into the internal SCM repository, as shown in this illustration:

[[img-internal_keys_mutual-encryption]]
.Mutual encryption of internal keys
image::src/img/internal_keys_mutual-encryption.svg[width=550]

The AES key is published in the cluster specific layer of the Hiera repository
with parameter `cluster_decrypted_password`, encrypted with eyaml PKCS7 public
key. A tarball `keys.tar.xz` with eyaml PKCS7 private and public keys is built
and encrypted with AES key. This encrypted tarball is published in the `files`
of the internal repository.

=== Key propagation service

When running on a node, Puppet-HPC needs to extract many encrypted parameter
from the Hiera repository. The eyaml PKCS7 private key is required to decrypt
these parameters. A key propogation service is in charge of securely
distributing this sensible key to the nodes on the network. The following
diagram represents the deployment process of the eyaml keys using this
propagation service:

[[img-eyaml_keys_propagation]]
.Deployment of eyaml keys with propagation service
image::src/img/eyaml_keys_propagation.svg[width=600]

On the node, the keys are gathered by the `hpc-config-apply` utility at the
early stage of its run, in the form of a decrypted tarball containing the eyaml
PKCS7 keys. The script is alternatively able to access the keys from POSIX
filesystem, this is notably used during the <<arch-encrypt-bootstrap,keys
bootstrap procedure>> but not intended afterwhile. Its primary use mode is to
download the tarball from the key propagation service.

Technically speaking, this service is a HTTP server listening on a specific TCP
port. This HTTP server only serves a decrypted version of the tarball containing
the eyaml PKCS7 keys. This HTTP server is tightly coupled to a firewall which
ensures incoming requests respect the following rules:

- Received on the network interface attached to the cluster internal
  administration network.
- TCP source port is strictly less than 1024, to make sure it is sent by a
  process run by root superuser.

The utility `hpc-config-apply` explicitely set the source TCP port of its
outgoing connection to meet the requirements and respect both conditions.

The tarball content is then extracted to standard eyaml configuration paths
before running Puppet, so that eyaml library can decrypt Hiera parameters
transparently on the nodes.

The encrypted tarball located in the `files` directory is actually used only to
deploy this key propogation service. After the initial <<arch-encrypt-bootstrap,
keys bootstrap>>, the other nodes expect this key propogation service to be
available to download the eyaml keys.

=== Sensible files decryption

This diagrams illustrates the deployment process of the encrypted files on the
nodes:

[[img-internal_keys_mutual-encryption]]
.Automatic decryption of sensible files
image::src/img/encrypted_files_deployment.svg[width=650]

The profiles and the generic modules expect to find the AES file encryption key
in Hiera under the parameter name `cluster_decrypt_password` and the URI to the
encrypted file in the `files/` directory of the internal repository. As
previously stated in the <<arch-encrypt-keys,Encryption keys>> section, this AES
key is encrypted with PKCS7 keys. It is therefore decrypted on-the-fly by the
eyaml library.

The generic modules call the `decrypt()` function of `hpclib` module. This
function downloads the file at the URI provided in parameter and decrypt it with
the given key. With Puppet-HPC, all private files are supposed to be located in
the `private_files_dir`, as documented in the <<cluster-main-parameters,main
shared parameters>> section. The `decrypt()` function internally calls
`hpc_source_file()` function of the same module which supports
`private_files_dir` URI schemes on either HTTP(s) servers or POSIX file systems.

[[arch-encrypt-bootstrap]]
=== Bootstrap procedure

This section document the steps to follow in order to bootstrap Puppet-HPC
encryption mechanisms and deploy the first keys propogation service on a
new cluster.

First, generate eyaml PKCS7 key pair:

----
# mkdir /etc/puppet/secure
# cd /etc/puppet/secure/
# eyaml createkeys
[hiera-eyaml-core] Created key directory: ./keys
Keys created OK
# chown -R puppet:puppet /etc/puppet/secure/keys
# chmod -R 0500 /etc/puppet/secure/keys
# chmod 0400 /etc/puppet/secure/keys/*.pem
----

Generate random 256 bits AES key:

----
# openssl rand -base64 32
----

The output of this command must be set in `cluster_decrypted_password` to the
cluster layer of the Hiera repository:

----
# eyaml edit hieradata/<cluster>/cluster.eyaml
----

Add the following content:

----
cluster_decrypt_password: DEC::PKCS7[<AES KEY>]!
----

Where:

* `<AES KEY>` is the random 256 bits key.

Generate a temporary tarball of the eyaml PKCS7 keys, encode it with `openssl`
and add it to the `files` directory of the internal repository:

----
# cd /etc/puppet/secure
# tar cJf /tmp/keys.tar.xz keys
# mkdir -p <internal repository>/files/<cluster>/eyaml
# cd <internal repository>/files/<cluster>/eyaml
# openssl aes-256-cbc -in /tmp/keys.tar.xz -out keys.tar.xz.enc -k <AES KEY>
----

Where:

* `<internal repository>` is the directory that contains the clone of the
  internal repository.
* `<cluster>` is the name of the cluster.
* `<AES KEY>` is the random 256 bits key.

At this stage, all keys are now stored encrypted in the internal repository and
the PKCS7 are available locally in the standard eyaml paths.

The key propagation service is not available on the network yet. The
`hpc-config-apply` utility can run with an alternate `key_source` to configure
the first key propagation service:

----
# hpc-config-apply --keys-source=file:///tmp
----

Once the first key propagation service is available on the cluster
administration network, the temporary decrypted tarball must be removed:

----
# rm /tmp/keys.tar.xz
----

Finally, the `hpc-config-apply` utility can run with its default configuration:

----
# hpc-config-apply
----

Starting from this point, there must always be at least one key propagation
service available on the network for Puppet to run properly.
