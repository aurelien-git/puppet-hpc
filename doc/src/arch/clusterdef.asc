== Cluster definition

This cluster configuration is meant to be used with a standard cluster
architecture, deviation from this architecture should be minimum. Some
constraints are planned to be relaxed in the future.

Here, we are going to describe this architecture and how it should be
defined to be used by the Puppet-HPC configuration.

[[cluster-architecture]]
=== Architecture

image::src/img/cluster_architecture.png[image]

As noted earlier, each machine is defined by its _role_ (front, cn, 
batch, etc ...). We can separate the machines into two groups: nodes with user
access (frontends, compute nodes, etc ..) and nodes who provides services for 
the cluster, including storage. There's no particular distinction (except 
the _role_) between these two groups in the configuration.

[[cluster-main-parameters]]
=== Main shared parameters

Some parameters must be defined at the _cluster_ level of the Hiera hierarchy.
These variables are not associated to a unique profile and are aimed to be
reused directly several times in Hiera or in puppet profiles.

* `cluster_name`: The complete name of the cluster. Can be used, for example,
in the slurm configuration.
* `cluster_prefix`: The prefix used for all the hostnames in the cluster. 
Generally it will be composed of 2 or 3 letters ("gen" for a cluster 
named "generic", for example).
* `private_files_dir`: The directory where all the files copied by Puppet on the
machines are stored. These files can be encrypted or not.
It can be a shared directory between all the nodes, or an http export if the 
_hpclib::hpc_file_ resource is used.
* `domain`: The domain name used across all the machines. Used in particular by
the _bind_ module.  
* `user_groups`: Array of user groups authorized to connect and submit jobs to
the cluster.
* `cluster_decrypt_password`: General password used by the _hpclib_ module to 
decrypt encrypted files before copying them on the machines. This variable is
usually itself encrypted using e-yaml.

[[cluster-network-definitions]]
=== Network definitions

[[cluster-topology]]
==== Topology

The network topology is defined at the _cluster_ level of the Hiera
hierarchy. This means it is common to all nodes.

----
## Network topology of the cluster
net::administration::ipnetwork: '172.16.0.0'
net::administration::netmask: '255.255.248.0'
net::administration::prefix_length: '/21'
net::administration::broadcast: '172.16.7.255'
net::lowlatency::ipnetwork: '172.16.40.0'
net::lowlatency::prefix_length: '/21'
net::management::ipnetwork: '172.16.80.0'
net::management::netmask: '255.255.240.0'
net::management::broadcast: '172.16.95.255'
net_topology:
    'wan':
        'name':           'WAN'
        'prefixes':       'wan'
        'ipnetwork':      '172.17.0.0.0'
        'netmask':        '255.255.255.0'
        'prefix_length':  '/24'
        'gateway':        '172.17.0.1'
        'broadcast':      '172.17.0.255'
        'ip_range_start': '172.17.0.1'
        'ip_range_end':   '172.17.0.254'
        'firewall_zone':  'wan'
    'administration':
        'name':           'ADM'
        'prefixes':       ''
        'ipnetwork':      '172.16.0.0'
        'netmask':        '255.255.248.0'
        'prefix_length':  '/21'
        'gateway':        '172.16.0.1'
        'broadcast':      '172.16.7.255'
        'ip_range_start': '172.16.0.1'
        'ip_range_end':   '172.16.7.254'
        'firewall_zone':  'clstr'
        'pool0':
            'ip_range_start':
                            '172.16.0.1'
            'ip_range_end':
                            '172.16.5.254'
        'pool1':          # IP reserved for the discovery process
            'ip_range_start':
                            '172.16.6.1'
            'ip_range_end':
                            '172.16.7.254'
    'lowlatency':
        'name':           'IB'
        'prefixes':       'ib'
        'ipnetwork':      '172.16.40.0'
        'netmask':        '255.255.248.0'
        'prefix_length':  '/21'
        'gateway':         ''
        'broadcast':       '172.16.47.255'
        'ip_range_start':  '172.16.40.1'
        'ip_range_end':    '172.16.47.254'
        'firewall_zone':   'clstr'
    'management':
        'name':            'MGT'
        'prefixes':        'mgt'
        'ipnetwork':       '172.16.80.0'
        'netmask':         '255.255.240.0'
        'prefix_length':   '/20'
        'gateway':         ''
        'broadcast':       '172.16.95.255'
        'ip_range_start':  '172.16.80.1'
        'ip_range_end':    '172.16.95.254'
        'firewall_zone':   'clstr'
    'bmc':
        'name':            'BMC'
        'prefixes':        'bmc'
        'ipnetwork':       '172.16.80.0'
        'netmask':         '255.255.248.0'
        'prefix_length':   '/21'
        'gateway':         ''
        'broadcast':       '172.16.87.255'
        'ip_range_start':  '172.16.80.1'
        'ip_range_end':    '172.16.87.254'
        'firewall_zone':   'clstr'
----

The `bmc` network connects all the management cards (bmc, imm, etc ...). The
`management` network connects the servers who must access these management
devices. That is the reason why they share an IP networks settings and ranges.

[[cluster-bonding]]
==== Bonding

Some network interfaces are bonded together for load balancing and high
availability. The bonding definition is done in Hiera. If the bonding is
uniform (i.e. same bond interface on same slave interfaces) between nodes,
this can be done at the _cluster_ level. In case of differences between
nodes, it must be done higher in the hierarchy (_role_ or _node_).

----
network::bonding_options:
    'bond0':
      'slaves':
         - 'eth0'
         - 'eth1'
      'options':  'mode=active-backup primary=eth0'
    'bond1':
      'slaves':
         - 'eth2'
         - 'eth3'
      'options':  'mode=active-backup primary=eth2'
----

This variable from Hiera uses _Auto Lookup_ to be passed to the `network`
class.

[[cluster-bridges]]
==== Bridges

When using a machine as a physical host for VMs, it is often necessary to
setup bridge interfaces. These bridge interfaces will be configured in the
`master_network` hash with the right IP addresses. The physical device will be
added automatically without an IP address. It is possible to create a bridge
above a bonding interface.

----
network::bridge_options:
    'br0':
      'ports':
         - 'bond0'
      'description': 'Administration network bridge.'
    'br2':
      'ports':
         - 'bond2'
      'description': 'WAN network bridge'
----

[[cluster-node-definitions]]
=== Node definitions

==== Master Network

Nodes are listed in a Hiera hash called `master_network`. It must be defined 
at the at the _cluster_ level of the Hiera hierarchy, but for readability
reasons it is in a separate `network.yaml` file.
Each key defines one node and its network configuration. Each node is described
by a hash containing its fully qualified hostname and the networks attached to 
it. Each network must have a name corresponding to the ones used in the  
`net_topology` hash described in the <<cluster-topology,topology section>>.

image::src/img/net_topology-master_network-corresponding.svg[image]

These values can be defined for each network:

* MAC address (`DHCP_MAC`):
The MAC address of the physical device connected to the network. It is used
to build the dhcpd server configuration.

* Interface device (`device`):
The device where the configuration must be applied, this means that with a
bonded interface, the configuration must be applied on the `bond` interface.
So it is not necessary that the physical interface is attached to the MAC address
quoted above. The interfaces enslaved to the `bond` interfaces can be
omitted from this configuration.

* Hostname (`hostname`):
The hostname of the machine on the considered network.

* IPv4 Address (`IP`):
The IPv4 address of the machine on the considered network. The netmask
comes from the `net_topology` variable.

* External config (or not) :
External configuration means the interface is configured on the system but
should not be setup by the Puppet-HPC configuration. It is useful if another
subsystem sets up the network interface: VPN, libvirt... On Debian, it means
the interface is not added to `/etc/network/interfaces`. This boolean can take
the value `true` or `false` and is considered `false` if omitted

Example:

----
master_network:
  genmisc1:
    fqdn: 'genmisc1.somedomain'
    networks:
      administration:
        'DHCP_MAC': '52:54:00:ba:9d:ac'
        'IP':       '172.16.2.21'
        'device':   'bond0'
        'hostname': 'genmisc1'
      lowlatency:
        'IP':       '172.16.42.21'
        'device':   'ib0'
        'hostname': 'llgenmisc1'
      management:
        'IP':       '172.16.88.21'
        'device':   'bond0'
        'hostname': 'mgtgenmisc1'
      bmc:
        'DHCP_MAC': '40:F2:E9:CD:53:CE'
        'IP':       '172.16.82.21'
        'hostname': 'bmcgenmisc1'
      wan:
        'IP':       '172.17.42.45'
        'device':   'bond1'
        'hostname': 'extgenmisc1'
----

This example defines one node (`genmisc1`) with the following
configuration:

* DHCP
** `52:54:00:ba:9d:ac` `genmisc1` `172.16.2.21`
** `40:F2:E9:CD:53:CE` `mgtgenmisc1` `172.16.82.21`
* Network configuration on the node
** `bond0` `172.16.2.21` `255.255.248.0` External Config: `false`
** `bond0` `172.16.88.21` `255.255.248.0` External Config: `false`
** `bond1` `172.17.42.45` `255.255.255.0` External Config: `false`
* DNS and Hosts
** `genmisc1` `172.16.2.21`
** `extgenmisc1` `172.17.42.45`

All lists are optional, so it is possible to define an element that just
defines a Host/DNS configuration (for virtual IP addresses for
instance):

----
master_network:
  genmisc:
    fqdn: 'genmisc.somedomain'
    networks:
      administration:
        'IP':       '172.16.2.20'
        'hostname': 'genmisc'
      management:
        'IP':       '172.16.82.20'
        'hostname': 'mgtgenmisc'
      wan:
        'IP':       '172.17.42.44'
        'hostname': 'extgenmisc'
----
