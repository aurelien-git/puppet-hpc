[[arch-pattern]]
== Pattern

Puppet-HPC is based on the three following tools and principles:

* *Facter* is used to report per-node facts. Moreover, some facts specific to
the HPC context are used to convey the global information about the cluster
that needs to be known when running Puppet on a node. These facts are
implemented in the `hpclib` module.

* *Hiera* is used to look up data. This tool helps separating site-specific or
cluster-specific data from Puppet code. Specific data are excluded from
Puppet-HPC, being kept, versioned and maintained in a separate internal
repository. The cluster description it contains should follow certain rules
though. These rules are detailed below in the Cluster Definition part.

* *The Roles/Profiles pattern* has been used to design the Puppet-HPC code. It
is organized in different levels of abstraction:

** Roles, which represent the business logic. A node includes one role,
and one only. Each role lists one or more profiles.
** Profiles, which represent the implementation of technical functionalities.
A profile includes and manages modules to define a logical technical stack.
** Modules, which are the elementary technical blocks. Modules should only be
responsible for managing aspects of the component they are written for and
should be as generic as possible.

Regarding the Roles/Profiles pattern, it is a common pattern in Puppet code
organization. This pattern is explained in details in this presentation:
https://puppet.com/presentations/designing-puppet-rolesprofiles-pattern

[[img-roles_profiles_data_separation]]
.Code and data separation with roles and profiles pattern
image::src/img/pattern_roles_profiles_hiera.pdf[width=300]

One of the interesting aspects of the Roles/Profiles pattern is that modules
should be as generic as possible. Whenever it is possible, *external community
modules* should be used. They should come from a reliable source: distribution
package or https://forge.puppet.com/[the Puppet Forge]. In any case, external community modules should
be properly reviewed.
