# Internals - Roles and Profiles

[[overview]]
= Overview

The Puppet configuration for HPC clusters has been designed following
the *Roles and Profiles* pattern. The Puppet code is organized in
different levels of abstraction : 

* Roles, which represent the business
logic. A node includes one role, and one only. Each role lists one or
more profiles. 
* Profiles, which represent the implementation of
technical functionalities. A profile includes and manages modules to
define a logical technical stack. 
* Modules, which are the elementary
technical blocks. Modules should only be responsible for managing
aspects of the component they are written for and should be as generic
as possible.

[[background]]
= Background

Roles and Profiles is a common pattern in puppet code organisation. The pattern
is explained in details by this presentation: 
https://puppet.com/presentations/designing-puppet-rolesprofiles-pattern

image::src/img/the-stack.jpg[image, title="The stack (from 'Designing Puppet: Roles/Profiles Pattern' by Craig Dunn)"]

[[implementation]]
= Implementation

== Node classifiers

Roles must be associated to a node. In the Puppet HPC configuration, this is
done by examining the name of the node. The name is analysed by searching for a
pattern `<prefix><role name><numerical ID>` (Example: `gencritical1`). This is
done by the `hpclib` module which define the `puppet_role` fact.

== Roles

In the Puppet HPC configuration, *roles* are implemented in hiera. A
simple module (`puppet-config/cluster/roles`) is loading all the classes
(profiles) defined in the hiera `profiles` array. The configuration is
providing some roles definitions but it's not mandatory to use it and 
a site may redefine roles entirely. That's why referencing a role by
referencing it's name directly should be avoided. 

The module `hpclib` defines facts that can return the role that
implements profiles with specific names (`server`, `relay`, `mirror`,
`replica`, `tracker`).

== Profiles

Profiles are classes grouped inside the `profiles` module. Each profile is a
feature for a host. That feature is built from technical components defined 
by the modules. Profiles can rely heavily on hiera to get the configuration
for the site. The profiles do not use auto-lookup but explicit `hiera` (or
`hiera_hash` and `hiera_array`) calls, this permits to control how data
coming from multiple hierarchy levels are merged.

The `profiles` module only defines classes, no resource, methods or facts. It
should not use templates or files. Profiles are meant to rely on the rest of
the hiera/Puppet HPC configuration and may not work outside of it. Profiles can
call any class except other profiles.

== HPC modules

HPC modules are modules that provide a more low level implementation of a technical
solution than a profile, but still rely on the Puppet HPC configuration as a
whole. This include module that use facts defined by `hpclib`.

Those modules can use other modules and define resources, templates, files,
facts, functions... Their name can be prefixed by `hpc_`.

== Generic modules

Generic modules implement a specific solution directly in a manner that is not
specific to the Puppet HPC configuration. These modules can not rely on data
not provided as class parameters or by the standard facts.

The modules must be able to work without hiera. The fact that these module can be 
used independently of the Puppet HPC configuration, does not mean that it must
support features not used in the Puppet HPC configuration.

HPC and Generic modules are not strictly separated, using or not data specific to
the Puppet HPC configuration is what makes a module fall into a category or
another.

== Third Party modules

Usage of third party generic modules is encouraged when possible. The limitation
is that it should come from a reliable source: distribution package or
puppetlabs forge. For modules from the forge, support level should be *approved*
at least. Exceptions to this rule is possible if the module has been properly 
reviewed. The only exception right now is `puppetlabs-strings`.

Third party module should be copied in the `puppet-config/modules_3rdparty`
directory. This may change in the future.
