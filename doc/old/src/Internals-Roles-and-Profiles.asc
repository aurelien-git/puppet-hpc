[[internals-roles-and-profiles]]
= Internals - Roles and Profiles

[[overview]]
== Overview

The Puppet configuration for HPC clusters has been designed following
the *Roles and Profiles* pattern. The Puppet code is organized in
different levels of abstraction : 

* Roles, which represent the business
logic. A node includes one role, and one only. Each role lists one or
more profiles. 
* Profiles, which represent the implementation of
technical functionalities. A profile includes and manages modules to
define a logical technical stack. 
* Modules, which are the elementary
technical blocks. Modules should only be responsible for managing
aspects of the component they are written for and should be as generic
as possible.

[[background]]
== Background

Roles and Profiles is a common pattern in puppet code organisation. The pattern
is explained in details by this presentation: 
https://puppet.com/presentations/designing-puppet-rolesprofiles-pattern

image::src/img/the-stack.jpg[image, title="The stack (from 'Designing Puppet: Roles/Profiles Pattern' by Craig Dunn)"]

[[implementation]]
== Implementation

=== Node classifiers

A role must be associated to a node. In the Puppet HPC configuration, it is 
assumed the node is named after its role. The naming rule for a node follows 
the pattern :

* `<prefix><role name><numerical ID>` (Example: `gencritical1`)

where `<prefix>` is the value of the variable `cluster_prefix` defined in Hiera.

To retrieve the role of a node, its hostname is analyzed by searching for the
pattern above. This is done by the Ruby script `role.rb` of the `hpclib` module which 
defines the `puppet_role` fact.

=== Roles

In the Puppet HPC configuration, each role is associated to the list of
profiles it includes.  The content of each role is specified in Hiera
(`hieradata/default/roles`) in the corresponding YAML file `<role>.yaml`. This
YAML file includes the definition of a `profiles` array, which is the list of
profiles the role is composed of.

A simple module (`puppet-config/cluster/roles`) is loading all the profile
classes defined in the Hiera `profiles` array.  The configuration is providing
some role definitions (critical, misc, batch, etc) but it is not mandatory to
use them. Any site may define its own roles. That is why referencing a role by
referencing its name directly should be avoided. 

The module `hpclib` defines some facts that indicate which role includes a 
profile with some specific keywords in its name (`server`, `relay`, `mirror`,
`replica`, `tracker`). Looking at the facts on any node of the cluster, it is 
easy to know which role implements the DNS server or the LDAP replica for example.

Example in `hieradata/common.yaml`:

```
conmand:     "%{hiera('cluster_prefix')}%{my_conman_server}"
```

The example above assumes an high-availability virtual IP address is defined
for the role defining including the profile `profiles::conman::server`.

=== Profiles

Profiles are classes grouped inside the `profiles` module
(`puppet-config/cluster/profiles`). Each profile is a feature for a host. That
feature is built from technical components defined by modules. Profiles can
rely heavily on Hiera to get the configuration for the site. The profiles do
not use auto-lookup but explicit `hiera` (or `hiera_hash` and `hiera_array`)
calls, this permits to control how data coming from multiple hierarchy levels
are merged.

A profile should not need a hiera key if the value is just passed to the
component class. This kind of parameters should be passed to the module class
directly with _Auto Lookup_. Only parameters processed or retrieved with
`hiera_array` and `hiera_hash` should be retrieved from the profile.

Doing this avoid redefining all module parameters in the profiles. Default
values should be set in the `common.yaml` of the Puppet HPC configuration
`hieradata` directory.

**Bad**

`profiles/manifests/toto/server.pp`:

---------------------
class profiles::toto::server {
  $peers = hiera_array('profiles::toto:server::peers')
  $port = hiera('profiles::toto:server::port')
  class { '::toto::server':
    port  => $port,
    peers => $peers,
  }
}
---------------------

`cluster.yaml`:

---------------------
profiles::toto::server::port: '42'
profiles::toto::server::peers:
  - servera
  - serverb
---------------------

**Good**

`profiles/manifests/toto/server.pp`:

---------------------
class profiles::toto::server {
  $peers = hiera_array('profiles::toto:server::peers')
  class { '::toto::server':
    peers => $peers
  }
}

---------------------

`cluster.yaml`:
---------------------
toto::server::port: '42'
profiles::toto::server::peers:
  - servera
  - serverb
---------------------

The `profiles` module only defines classes, no resources, methods or facts. It
should not use templates or files sourced in the `profiles` module. Profiles
are meant to rely on the rest of the Hiera/Puppet HPC configuration and may not
work outside of it. Profiles can call any class except other profiles or roles.

=== HPC modules

HPC modules are modules that provide a lower level implementation of a
technical solution than a profile, but they still rely on the Puppet HPC
configuration as a whole. This includes modules that use facts defined by
`hpclib`.

Those modules can use other modules and define resources, templates, files,
facts, functions... Their name can be prefixed by `hpc_`.

=== Generic modules

Generic modules implement a specific solution directly in a manner that is not
specific to the Puppet HPC configuration. These modules can not rely on data
other than class parameters or standard facts.

Modules must be able to work without Hiera. Despite the fact that these modules
can be used independently of the Puppet HPC configuration, most of them have
been created to be used in the context of an HPC cluster. As a result, the
features they support might seem incomplete for other uses. If you feel this
way, please feel free to contribute and add features to make our modules as
generic as possible.

HPC and Generic modules are not strictly separated. Whether data specific to
the Puppet HPC configuration is used in the module or not is what makes a module 
falls into a category or the other.

=== Third Party modules

Usage of third party generic modules is encouraged when possible. The
limitation is that it should come from a reliable source: distribution package
or puppetlabs forge. For modules from the forge, support level should be
*approved* at least. Exceptions to this rule is possible if the module has been
properly reviewed.

Third party modules should be copied in the `puppet-config/modules_3rdparty`
directory. This may change in the future.

Forking a third party module should be avoided as much as possible. If a
suitable third party module does not provide all the necessary features, it is
recommended to create another module that will *wrap* the third party module.
Upstreaming the new feature when it makes sense is encouraged. In some
cases, the wraping can be done directly in the profile (eg.
`profiles::ntp::server`) to avoid creating a module.
