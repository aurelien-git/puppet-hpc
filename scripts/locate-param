#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2017 EDF SA
# Contact:
#       CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#       1, Avenue du General de Gaulle
#       92140 Clamart
#
# Authors: CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#
# This file is part of puppet-hpc.
#
# HPCStats is free software: you can redistribute in and/or
# modify it under the terms of the GNU General Public License,
# version 2, as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with puppet-hpc. If not, see
# <http://www.gnu.org/licenses/>.

import sys
import os
import re
import subprocess

import yaml

HIERA_YAML_DIRS = [ 'puppet-hpc/hieradata', 'hpc-privatedata/hieradata' ]
PROFILES_DIR = 'puppet-hpc/puppet-config/cluster/profiles/manifests'

def usage():

    print("%s <param>" % (__file__))
    sys.exit(1)

def hiera_yaml():
    """Returns the list of Hiera YAML files."""

    hiera_yaml_files = []
    for hiera_yaml_dir in HIERA_YAML_DIRS:
        for root, dirs, files in os.walk(hiera_yaml_dir):
            hiera_yaml_files.extend([os.path.join(root,filename)
                                     for filename in files
                                     if filename.endswith('.yaml')])
    return hiera_yaml_files

def check_interpolation(value, search):

    if re.search("%%\{hiera\('%s'\)\}" % (search), value) is not None:
        return True

def explore_content(param, search, value):

    if type(value) is str:
        return check_interpolation(value, search)

    if type(value) is dict:
        for key, xval in value.items():
            if check_interpolation(key, param):
                return True
            if explore_content(param, search, xval):
                return True

    if type(value) is list:
        for xval in value:
            if explore_content(param, search, xval):
                return True

    return False

def search_yaml(filename, search):

    print("loading content of YAML file %s" % (filename))
    with open(filename, 'r') as stream:
        try:
            content = yaml.load(stream)
        except yaml.scanner.ScannerError as err:
            print("error while loading YAML file %s: %s" % (filename, err))
            return

    for param, value in content.items():
        if param == search:
            print("  param %s is defined" % (param))
        elif explore_content(param, search, value):
            print("  interpolation in %s" % (param))

def search_profiles(search):

    cmd = ['grep', '-e' ,"hiera.*\('%s'\)" % (search), '-r', PROFILES_DIR]
    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]
    files = [ str(line.split(b':')[0]) for line in output.splitlines() ]
    uniq_files = list(set(files)) # remove duplicate using set()

    if len(uniq_files):
        print('profiles:')
    for filename in uniq_files:
        # remove dirname + .pp, replace / with ::
        classname = filename[len(PROFILES_DIR)+1:-3].replace('/', '::')
        print("  %s [file: %s]" % (classname, filename))

def locate(search):

    yaml_files = hiera_yaml()
    for yaml_file in yaml_files:
        search_yaml(yaml_file, search)

    search_profiles(search)

def main():

    if len(sys.argv) != 2:
      usage()
    search = sys.argv[1]

    locate(search)
    

if __name__ == '__main__':
    main()
