#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2017 EDF SA
# Contact:
#       CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#       1, Avenue du General de Gaulle
#       92140 Clamart
#
# Authors: CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#
# This file is part of puppet-hpc.
#
# puppet-hpc is free software: you can redistribute in and/or
# modify it under the terms of the GNU General Public License,
# version 2, as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with puppet-hpc. If not, see
# <http://www.gnu.org/licenses/>.

import yaml
import sys
import argparse
import os
import re

def parse_args():
    parser = argparse.ArgumentParser(
      description='List hosts from a puppet-hpc hiera yaml file.',
      argument_default=argparse.SUPPRESS
    )

    parser.add_argument('privatedata_path',
                        help='Puppet HPC private data directory.')

    parser.add_argument('cluster_name',
                        help='Name of the cluster.')

    parser.add_argument('--ipaddr', '-i',
                        dest='ipaddr', action='store_true',
                        help='Output IP addresses.')
    parser.set_defaults(ipaddr=False)

    parser.add_argument('--alias', '-a',
                        dest='alias', action='store_true',
                        help='Output host aliases.')
    parser.set_defaults(alias=False)

    parser.add_argument('--fqdn', '-f',
                        dest='fqdn', action='store_true',
                        help='Output FQDNs.')
    parser.set_defaults(fqdn=False)

    parser.add_argument('--domain', '-d',
                        dest='domain',
                        nargs='?', help='Also output aliases with this domain.')

    return parser.parse_args()

def load_yaml(file_path):

    with open(file_path, 'r') as stream:
        try:
            return yaml.load(stream)
        except yaml.YAMLError as exc:
            print(exc)
            sys.exit(1)

# Return the list of roles having a roles/<role>.yaml
def get_defined_roles(hiera_cluster_path):
    roles = []
    filenames = os.listdir(os.path.join(hiera_cluster_path, 'roles'))
    for filename in filenames:
        if filename.endswith('.yaml'):
            roles.append(filename[:-5])
    return roles

def get_host_data(hostname, data):
    aliases = []
    ipaddrs = []
    fqdn = None
    if 'fqdn' in data.keys():
        fqdn = data['fqdn']
    for netname in ['administration', 'lowlatency', 'management']:
        if netname in data['networks'].keys():
            netdata = data['networks'][netname]
            if 'hostname' in netdata.keys() and netdata['hostname'] != hostname:
                aliases.append(netdata['hostname'])
            if 'IP' in netdata.keys():
                ipaddrs.append(netdata['IP'])

    return fqdn, aliases, ipaddrs

def get_host_role(hostname, cluster_prefix):
    host_re = re.compile('%s(?P<role>\D+)(?P<id>\d+)' % cluster_prefix)
    m = host_re.match(hostname)
    if m is not None:
        return m.group('role')
    else:
        return 'default'

def print_host_line(hostname, fqdn, aliases, ipaddrs, args):
    sys.stdout.write(hostname)
    if args.fqdn and fqdn is not None:
        sys.stdout.write(' %s' % fqdn)
    if args.alias:
        for alias in aliases:
            sys.stdout.write(' %s' % alias)
            if 'domain' in args:
                sys.stdout.write(' %s.%s' % (alias, args.domain))
    if args.ipaddr:
        for ipaddr in ipaddrs:
            sys.stdout.write(' %s' % ipaddr)
    sys.stdout.write('\n')

def main():
    args = parse_args()
    hiera_cluster_path = os.path.join(args.privatedata_path, 'hieradata', args.cluster_name)
    net_yaml     = load_yaml(os.path.join(hiera_cluster_path, 'network.yaml'))
    cluster_yaml = load_yaml(os.path.join(hiera_cluster_path, 'cluster.yaml'))
    defined_roles = get_defined_roles(hiera_cluster_path)
    cluster_prefix = cluster_yaml['cluster_prefix']
    master_network = net_yaml['master_network']

    for hostname, data in master_network.items():
        role = get_host_role(hostname, cluster_prefix)
        if role in defined_roles:
            fqdn, aliases, ipaddrs = get_host_data(hostname, data)
            print_host_line(hostname, fqdn, aliases, ipaddrs, args)

if __name__ == '__main__':

    main()
