#!/usr/bin/env python3

import locale
import argparse
import urllib3
import urllib3.util
import tarfile
import subprocess
import os.path
import configparser
import logging
import io
import shutil

LOCALE = 'C.UTF-8'

DEFAULT_TMPDIR = '/tmp'
DEFAULT_ENVIRONMENT = 'production'

PUPPET_ENV_ARCHIVE_NAME = 'puppet-config-environment.tar.xz'
PUPPET_ENV_BASE_PATH = '/etc/puppet/environments'

KEYS_ARCHIVE_NAME = 'keys.tar.xz'
KEYS_BASE_PATH = '/etc/puppet/secure'

HIERA_CONF_ARCHIVE_NAME = 'hiera.yaml'
HIERA_CONF_PATH = '/etc/puppet/hiera.yaml'

FACTS_CONF_ARCHIVE_NAME = 'hpc-config-facts.yaml'
FACTS_CONF_PATH = '/var/lib/puppet/facts.d/hpc-config-facts.yaml'

PUPPET_CONF_ARCHIVE_NAME = 'puppet.conf'
PUPPET_CONF_PATH = '/etc/puppet/puppet.conf'


def get_parameter(key, default, config_section, default_section, args):
    if key in args:
        return vars(args)[key]
    if key in config_section:
        return config_section[key]
    if key in default_section:
        return default_section[key]
    return default


def get_parameter_int(key, default, config_section, default_section, args):
    if key in args:
        return int(vars(args)[key])
    if key in config_section:
        return int(config_section[key])
    if key in default_section:
        return int(default_section[key])
    return default


def get_parameters():
    params = {}

    args = parse_args()
    if 'config_file' in args:
        config = parse_config(vars(args)['config_file'])
    else:
        config = parse_config()

    if 'DEFAULT' not in config:
        default_section = {}
    else:
        default_section = config['DEFAULT']

    # First get the environment
    env = get_parameter(
        'environment', DEFAULT_ENVIRONMENT, {}, default_section, args)
    params['environment'] = env

    # Find the environment section
    if env not in config:
        env_section = {}
    else:
        env_section = config[env]

    # Search params with defaults
    if 'TMPDIR' in os.environ.keys():
        default_tmpdir = os.environ['TMPDIR']
    else:
        default_tmpdir = DEFAULT_TMPDIR
    params['tmpdir'] = get_parameter(
        'tmpdir', default_tmpdir, env_section, default_section, args)

    # Search other strings params
    for param_name in ['source', 'keys_source', 'deploy_step', 'tags']:
        params[param_name] = get_parameter(
            param_name, None, env_section, default_section, args)
    # Search other integer params
    for param_name in ['verbosity']:
        params[param_name] = get_parameter(
            param_name, 0, env_section, default_section, args)
    # Search other bool params
    for param_name in ['dry_run']:
        params[param_name] = get_parameter(
            param_name, False, env_section, default_section, args)

    return params


def parse_config(file_path='/etc/hpc-config.conf'):
    config = configparser.ConfigParser()
    config.read(file_path)
    return config


def parse_args():
    parser = argparse.ArgumentParser(
        description='Apply the HPC Configuration.',
        argument_default=argparse.SUPPRESS
    )

    parser.add_argument('--dry-run',
                        dest='dry_run', action='store_true',
                        help="Don't actually perform configuration (still downloads env).")
    parser.set_defaults(dry_run=False)


    parser.add_argument('--config', '-c',
                        dest='config_file',
                        nargs='?', help='Configuration file')

    parser.add_argument('--source', '-s',
                        dest='source',
                        nargs='?', help='Configuration source URL')

    parser.add_argument('--environment', '-e',
                        dest='environment',
                        nargs='?', help='Environment name')

    parser.add_argument('--tmpdir', '-t',
                        dest='tmpdir',
                        nargs='?', help='Change TMPDIR env for puppet run.')

    parser.add_argument('--deploy-step', '-d',
                        dest='deploy_step',
                        nargs='?', help='Deploy step',
                        choices=['production', 'usbdisk'])

    parser.add_argument('--keys-source', '-k',
                        dest='keys_source',
                        nargs='?', help='Secret keys source')

    parser.add_argument('--tags',
                        dest='tags',
                        nargs='?', help='Puppet tags (comma separated list)')

    parser.add_argument('--verbose', '-v',
                        dest='verbosity', action='count',
                        help='More output, can be specified multiple times.')

    return parser.parse_args()


def setup_logging(verbosity=0):
    if verbosity >= 3:
        level = logging.DEBUG
    elif verbosity >= 1:
        level = logging.INFO
    else:
        level = logging.WARNING
    logging.basicConfig(level=level)


def http_get_file(url, root_source_port=False):
    parsed_url = urllib3.util.parse_url(url)
    connect_ok = False
    source_port = 1024
    while not connect_ok and source_port != 0:
        if root_source_port:
            source_port -= 1
        else:
            source_port = 0
        if parsed_url.scheme == 'https':
            http = urllib3.connection.HTTPSConnection(
                host=parsed_url.host, port=parsed_url.port,
                source_address=('0.0.0.0', source_port)
            )
        else:
            http = urllib3.connection.HTTPConnection(
                host=parsed_url.host, port=parsed_url.port,
                source_address=('0.0.0.0', source_port)
            )
        try:
            logging.debug("Trying to connect with source port %s", source_port)
            http.connect()
            connect_ok = True
        except OSError as err:
            logging.warn(
                "Failed to connect to http(s) server %s with " % url +
                "source port: %s, error: %s. Retrying..." % (source_port, err)
            )
            http.close()

    if not connect_ok:
        raise RuntimeError(
            "Failed to connect to the server to get url: %s" % url
        )

    headers = {
        'Host': "%s:%s" % (parsed_url.host, parsed_url.port),
        'User-Agent': 'hpc-config-apply',
    }
    http.request('GET', parsed_url.path, headers=headers)
    response = http.getresponse()

    if response.status >= 400:
        raise RuntimeError("Bad HTTP Status (%s), reason: %s" % \
                           (response.status, response.reason))
    data = response.read()
    source_file = io.BytesIO(data)
    http.close()

    return source_file


def get_file_for_url(url, root_source_port=False):
    parsed_url = urllib3.util.parse_url(url)
    if parsed_url.scheme in [None, 'file']:
        url_file = open(parsed_url.path, 'rb')
    else:
        url_file = http_get_file(url, root_source_port)
    return url_file


def extract_url(url, path, root_source_port=False):
    source_file = get_file_for_url(url, root_source_port)
    archive = tarfile.open(fileobj=source_file, mode='r:xz')
    archive.extractall(path=path)

    source_file.close()


def get_url(url, path, root_source_port=False):
    source_file = get_file_for_url(url)
    dest = open(path, 'wb')

    buffer_size = 1024
    while 1:
        copy_buffer = source_file.read(buffer_size)
        if not copy_buffer:
            break
        dest.write(copy_buffer)

    source_file.close()
    dest.close()


def get_keys(source):
    if source is None:
        logging.info(
            "Keys source is undefined. Skipping retrieval of keys.")
        return
    keys_url = '/'.join([source.rstrip('/'), KEYS_ARCHIVE_NAME])
    keys_path = os.path.join(KEYS_BASE_PATH, 'keys')
    logging.info("Getting secure keys from %s", keys_url)
    if os.path.isdir(keys_path):
        shutil.rmtree(keys_path)
    extract_url(keys_url, KEYS_BASE_PATH, root_source_port=True)
    return


def get_hiera_conf(source, environment, version='latest'):
    if source is None:
        logging.info(
            "Source is undefined. Skipping retrieval of Hiera config.")
        return
    hiera_conf_url = '/'.join([
        source.rstrip('/'),
        environment,
        version,
        HIERA_CONF_ARCHIVE_NAME
    ])
    logging.info("Getting Hiera config from %s", hiera_conf_url)
    if os.path.exists(HIERA_CONF_PATH):
        os.remove(HIERA_CONF_PATH)
    get_url(hiera_conf_url, HIERA_CONF_PATH)
    return

def get_facts_conf(source, environment, version='latest'):
    if source is None:
        logging.info("Source is undefined. Skipping retrieval of Facts.")
        return
    facts_conf_url = '/'.join([
        source.rstrip('/'),
        environment,
        version,
        FACTS_CONF_ARCHIVE_NAME
    ])
    parent_dir = os.path.dirname(FACTS_CONF_PATH)
    if not os.path.isdir(parent_dir):
        logging.debug("Creating parent directory %s", parent_dir)
        os.makedirs(parent_dir, 0o755)
    logging.info("Getting Facts config from %s", facts_conf_url)
    if os.path.exists(FACTS_CONF_PATH):
        os.remove(FACTS_CONF_PATH)
    get_url(facts_conf_url, FACTS_CONF_PATH)
    return


def get_puppet_conf(source, environment, version='latest'):
    if source is None:
        logging.info(
            "Source is undefined. Skipping retrieval of Puppet Config.")
        return
    puppet_conf_url = '/'.join([
        source.rstrip('/'),
        environment,
        version,
        PUPPET_CONF_ARCHIVE_NAME
    ])
    logging.info(
        "Getting Puppet config from %s" % puppet_conf_url
    )
    if os.path.exists(PUPPET_CONF_PATH):
        os.remove(PUPPET_CONF_PATH)
    get_url(puppet_conf_url, PUPPET_CONF_PATH)
    return


def get_puppet_environment(source, environment, version='latest'):
    if source is None:
        logging.info(
            "Source is undefined. Skipping retrieval of Puppet Environment.")
        return
    env_url = '/'.join([
        source.rstrip('/'),
        environment,
        version,
        PUPPET_ENV_ARCHIVE_NAME
    ])
    puppet_env_path = os.path.join(PUPPET_ENV_BASE_PATH, environment)
    logging.info(
        "Getting Puppet HPC configuration environment from %s", env_url
    )
    if os.path.isdir(puppet_env_path):
        shutil.rmtree(puppet_env_path)
    extract_url(env_url, PUPPET_ENV_BASE_PATH)
    return


def puppet_apply(environment, deploy_step, verbosity=0, dry_run=False, tmpdir=None, tags=None):
    logging.info("Applying puppet configuration.")

    if verbosity >= 3:
        apply_options = ['--debug']
    elif verbosity == 2:
        apply_options = ['--test']
    elif verbosity == 1:
        apply_options = ['--verbose']
    else:
        apply_options = ['--logdest', 'syslog']

    if tags is not None and tags != '':
        apply_options += ['--tags', tags]

    if dry_run:
        apply_options += ['--noop']

    manifests_path = os.path.join(
        PUPPET_ENV_BASE_PATH, environment, 'manifests', 'cluster.pp')

    env_vars = os.environ.copy()
    if tmpdir is not None:
        logging.debug("Set TMPDIR for puppet run to: '%s'", tmpdir)
        env_vars['TMPDIR'] = tmpdir

    # environment is puppet environment
    # env_vars is process environment variables
    actual_code = subprocess.call(
        ['/usr/bin/puppet', 'apply'] + \
        apply_options + \
        ['--environment', environment, manifests_path],
        env=env_vars
    )

    # With puppet, code 2 is special and means, action performed
    # without error, so we change that to 0
    if actual_code == 2:
        logging.info("Puppet return code is 2, so returning success")
        code = 0
    else:
        code = actual_code
    logging.info("Final return code for puppet apply is: %s", code)
    return code

if __name__ == "__main__":
    locale.setlocale(locale.LC_ALL, LOCALE)

    params = get_parameters()

    setup_logging(params['verbosity'])

    logging.debug("Parameters: %s.", params)

    get_keys(params['keys_source'])

    get_puppet_environment(params['source'], params['environment'])

    get_hiera_conf(params['source'], params['environment'])

    get_facts_conf(params['source'], params['environment'])

    get_puppet_conf(params['source'], params['environment'])

    code = puppet_apply(
        environment=params['environment'],
        deploy_step=params['deploy_step'],
        verbosity=params['verbosity'],
        dry_run=params['dry_run'],
        tags=params['tags'],
        tmpdir=params['tmpdir'],
    )

    exit(code)
